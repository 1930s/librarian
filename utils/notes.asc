= Database Fixing
:author: Michael F Evans

The current database storage is sub-optimal, the authors table needs migrating to a proper TNF table with the following schema.
[source,bash]
+--------------+---------+------+-----+---------+----------------+
| Field        | Type    | Null | Key | Default | Extra          |
+--------------+---------+------+-----+---------+----------------+
| author_id    | int(11) | NO   | PRI | NULL    | auto_increment |
| author_last  | text    | YES  |     | NULL    |                |
| author_first | text    | YES  |     | NULL    |                |
| role         | text    | YES  |     | NULL    |                | eg, editor, compiler...
+--------------+---------+------+-----+---------+----------------+



With another joining table.
[source,bash]
+----------------+---------+------+-----+---------+-------+
| Field          | Type    | Null | Key | Default | Extra |
+----------------+---------+------+-----+---------+-------+
| book_id        | int(11) | NO   |     | NULL    |       | ONE
| author_id      | int(11) | NO   |     | NULL    |       | MANY
| author_ordinal | int(11) | NO   |     | NULL    |       | INT
+----------------+---------+------+-----+---------+-------+

Some example selects:
[source,sql]
SELECT title, author_id, authors.name FROM books LEFT JOIN authors ON (books.author_id  = authors.id);
SELECT title, author_id, authors.name FROM books LEFT JOIN authors ON (books.author_id  = authors.id) WHERE isbn='';


Getting the data from the current form is non-trivial.  Some examples are shown below.

- Neville Featherstone & Edward Lee-Elliott
- Margaret Miner, Hugh Rawson
- compiled, written by Maurice Hanssen with Jill Marsden
- edited with an introduction by David Galloway
- Behrouz Forouzan with Catherine Coombs, Sophia Chung Fegan
- written, drawn by Antoine de Saint-Exup√©ry
- John Gooders ; illustrated by Alan Harris.



This is just the start, as librarian should put new books into the new table.  If the current storage is used in parallel with the new then much of the librarian code can be left alone simply running a variant of the author_fix.py after book lookup to populate the new table.  We could repurpose add_edit.py for this and we would need to modify it anyway to work with the new schema.

Looking at the examples above it's unlikely that the task can be completely automated and some user intervention will be required.  Authors of the form like the first two examples above should be relatively simple to parse.  The remainder will have to be manually adjusted.  The first step would be to parse the entire dataset and mark difficult items as un-parseable, these will be passed to a second manual stage, for which we will need a GUI.

We could repurpose add_edit.py for manual editing and we would need to modify it anyway to work with the new schema.

== Workflow

Create some new tables

[source,sql]
CREATE table book_authors(author_id int PRIMARY KEY AUTO_INCREMENT, author_last text, author_first text);
-- Create a key to ensure unique names.
ALTER TABLE book_authors ADD UNIQUE KEY book_authors_unique_idx(author_last(10), author_first(10));
CREATE table books_to_authors(book_id int NOT NULL, author_id int NOT NULL, author_ordinal int NOT NULL, author_role text);
CREATE TABLE new_books LIKE books; -- Just the schema
INSERT INTO new_books SELECT * FROM books; -- To copy the data into the new table.  We don't do this.

Run script to get ISBN numbers and properly populate the new tables.  Steal a lot of code from librarian for this as it is quite involved.

== Extract the Data

We can now extract the data with:
[source,sql]
SELECT isbn, title, author_ordinal, author_first, author_last  FROM new_books b  LEFT JOIN books_to_authors ba ON (b.id = ba.book_id)  LEFT JOIN book_authors a ON (ba.author_id = a.author_id);

A better select concatenating multiple authors.
[source,sql]
SELECT b.title, GROUP_CONCAT(a.author_first, " ", a.author_last) AS Authors FROM new_books b INNER JOIN books_to_authors ba ON (b.id = ba.book_id) INNER JOIN book_authors a ON (ba.author_id = a.author_id) WHERE isbn = '000458824X' GROUP BY b.title ORDER BY author_ordinal;




Oh dear, we seem to have several NULL authors, let's see them:
[source,sql]
SELECT isbn, title, author_ordinal, author_first, author_last  FROM new_books b  LEFT JOIN books_to_authors ba ON (b.id = ba.book_id)  LEFT JOIN book_authors a ON (ba.author_id = a.author_id) WHERE author_last IS NULL;


== References
    http://www.php.net/manual/en/pdostatement.fetch.php
    http://stackoverflow.com/questions/13353231/how-write-down-to-database-multiple-authors-in-simple-books-table


